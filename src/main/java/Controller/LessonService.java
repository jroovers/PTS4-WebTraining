/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Controller;

import InfoSupportWeb.utility.LessonDAOUtils;
import Model.Course;
import Model.Lesson;
import java.util.List;
import javax.ejb.Stateless;

/**
 *
 * @author Jeroen Roovers
 */
@Stateless
public class LessonService {
        
    public LessonService() {
        
    }

    /**
     * Adds a new lesson with course c, with default values for location and
     * datetime.
     *
     * @param c main course of lesson
     * @return Lesson with id generated by DB
     */
//    public Lesson addLesson(Course c) {
//        LessonDAOUtils lessonDAOUtils = new LessonDAOUtils();
//        Lesson l = new Lesson(c);
//        return lessonDAOUtils.addLesson(l);
//    }

    /**
     * Adds a lesson to the database.
     *
     * @param l new lesson to add
     * @return Lesson with id generated by DB
     */
    public Lesson addLesson(Lesson l) {
        LessonDAOUtils lessonDAOUtils = new LessonDAOUtils();
        return lessonDAOUtils.addLesson(l);
    }

    /**
     * Gets all lessons from the DB
     *
     * @return list of lessons
     */
    public List<Lesson> getLessons() {
        LessonDAOUtils lessonDAOUtils = new LessonDAOUtils();
        return lessonDAOUtils.getLessons();
    }

    /**
     * Edits an existing lesson. This method wil update all the fields of a
     * lesson except for the unique identifier 'Ã­d'
     *
     * @param l lesson to be updates
     * @return true if succesful
     */
    public boolean editLesson(Lesson l) {
        LessonDAOUtils lessonDAOUtils = new LessonDAOUtils();
        return lessonDAOUtils.editLesson(l);
    }

    /**
     * Sets an exisiting lesson to inactive. this method will only update the
     * field 'active' of a lesson, based on it's unique identifier 'id'.
     *
     * @param l lessen to be deleted
     * @return true if succesful
     */
    public boolean deleteLesson(long lesson_ID) {
        LessonDAOUtils lessonDAOUtils = new LessonDAOUtils();
        return lessonDAOUtils.removeLesson(lesson_ID);
    }
    
    /**
     * Gets an lesson from the ID of a course
     * 
     * @param course_ID id of the Course
     * @return List of lessons which are connected to the course ID
     */
    public List<Lesson> getLessonsFromCourse(long course_ID) {
        LessonDAOUtils lessonDAOUtils = new LessonDAOUtils();
        return lessonDAOUtils.getLessonsFromCourse(course_ID);
    }
    
    public long signUpUser(long lesson_ID, long user_ID) {
        LessonDAOUtils lessonDAOUtils = new LessonDAOUtils();
        long id = lessonDAOUtils.signUpUser(lesson_ID, user_ID);
        return id;
    }

}
